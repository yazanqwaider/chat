<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/dist/main.css">
    <link rel="stylesheet" href="/css/fontawesome.min.css" />
    <title>People</title>
</head>

<body>
    <%- include('layouts/header.ejs'); %>

    <div class="flex">
        <div class="people-layout w-1/5 flex flex-col bg-black py-2">
            <h4 class="text-white text-xl text-center my-1.5">Friends</h4>
            <hr class="mb-3 bg-gray-600 border-0 h-0.5">

            <% for(let i = 0; i < friends.length; i++) { %>
                <button class="chat-item" data-userId="<%= friends[i]._id %>">
                    <i class="fa-solid fa-user-large"></i> 
                    <%= friends[i].username %>
                </button>
            <% } %>
        </div>
    
        <div class="flex flex-col justify-between w-4/5">
            <%- include('./messages.ejs') %>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const user = JSON.parse(localStorage.getItem('user'));
        let active_chat_friend = null;

        var socket = io();
        
        socket.emit('connected', user._id);

        socket.on('messageReceived', function(messageObject) {
            messageObject = JSON.parse(messageObject);
            let message = createMessageItem({text: messageObject.messageText, user_sender: active_chat_friend.user_id});
            
            if(document.querySelector('.no-messages-yet')) {
                document.querySelector('.no-messages-yet').remove();
            }
            document.querySelector('.messages-layout').innerHTML+= message;
        });


        socket.on('typingNow', function(statusObject) {
            statusObject = JSON.parse(statusObject);
            if(statusObject.typing_status) {
                document.querySelector('.typing-status').textContent = "Typing now ...";
            }
            else {
                document.querySelector('.typing-status').textContent = "";
            }
        });

        const chatItems = document.querySelectorAll('.chat-item');
        chatItems.forEach(chatItem => {
            chatItem.addEventListener('click', function() {
                let userId = this.getAttribute('data-userId');
                getMessages(userId);
            });
        });

        async function getMessages(userId) {
            fetch(`/api/chats/${userId}`, {headers: {"Content-Type": "application/json"}})
                .then((response) => response.json()).then((res) => {
                    // console.log(res);
                    const chat = res.chat;
                    active_chat_friend = {
                        chat_id: chat._id,
                        user_id: userId
                    };

                    let messagesElm = "";
                    if(chat.hasOwnProperty('messages')) {
                        const messages = chat.messages;
                        messages.forEach((message) => {
                            messagesElm+= createMessageItem(message);
                        });
                    }
                    else {
                        messagesElm = `
                            <div class='no-messages-yet flex flex-col justify-center items-center h-full w-full'>
                                <img src='/images/no-data.svg' class="w-1/5">
                                <h5 class="my-3 text-xl">No Messages Yet ...</h5>
                            </div>`;
                    }

                    document.querySelector('.messages-layout').innerHTML = messagesElm;
                })
                .catch((err) => {
                    console.log(err);
                });
        }
    

        const imageFilesInput = document.getElementById('image_file');

        let images = defineImages();

        function defineImages() {
            return new Proxy([], {
                set(target, property, file) {
                    target[property] = file;

                    let preview_images = "";
                    target.forEach((img, index) => {
                        preview_images+= `
                            <div class="relative">
                                <button class="remove-img-btn bg-red-500  w-5 rounded-md text-sm text-white absolute top-0.5 right-1.5" data-imgIndex="${index}">x</button>
                                <img src="${URL.createObjectURL(img)}" class="w-24 mx-2 rounded">
                            </div>
                        `;
                    });
                    document.querySelector('.images-preview-layout').innerHTML = preview_images;

                    handleRemoveImageBtnsEvents();
                },
            });
        }

        imageFilesInput.addEventListener('change', function(e) {
            for (let i = 0; i < e.target.files.length; i++) {
                images[images.length + i] = e.target.files[i];
            }
        });


        const messageInput = document.getElementById('message');

        messageInput.addEventListener('focus', function() {
            if(active_chat_friend != null) {
                const typingNowObject = {
                    receiver_id: active_chat_friend.user_id,
                    chat_id: active_chat_friend.chat_id,
                    typing_status: true
                };
                socket.emit("typingNow", typingNowObject);
            }
        });

        messageInput.addEventListener('blur', function() {
            if(active_chat_friend != null) {
                const typingNowObject = {
                    receiver_id: active_chat_friend.user_id,
                    chat_id: active_chat_friend.chat_id,
                    typing_status: false
                };
                socket.emit("typingNow", typingNowObject);
            }
        });
        
        document.getElementById('send-message-btn').addEventListener('click', function(e) {
            e.preventDefault();

            let form = document.getElementById('message-form');
            let messageText = document.querySelector('#message-form #message');

            if(messageText && active_chat_friend) {
                let formData = new FormData();
                formData.append('content_text', messageText.value);
                images.forEach((img) => {
                    formData.append('images', img);
                });

                fetch(`/api/chats/${active_chat_friend.chat_id}/messages`, 
                    {
                        method: 'POST',
                        body: formData
                    }
                )
                .then((res) => res.json())
                .then((response) => {
                    // console.log(response);
                    if(response.status) {
                        let message = createMessageItem(response.message);
                        if(document.querySelector('.no-messages-yet')) {
                            document.querySelector('.no-messages-yet').remove();
                        }

                        document.querySelector('.messages-layout').innerHTML+= message;
                        document.querySelector('#message-form #message').value = "";
                        images.splice(0, images.length);

                        const sender_id = JSON.parse(localStorage.getItem('user'))._id;
                        let msgObject = {
                            sender_id: sender_id,
                            receiver_id: active_chat_friend.user_id,
                            messageText: response.message.text
                        };

                        socket.emit("messageSended", msgObject);
                    }
                });
            }
        });


        function createMessageItem(message) {
            const side_class = (message.user_sender == user._id)? 'message_owner' : 'message_receiver';

            let images = "<div class='flex'>";
            if(message.hasOwnProperty('images')) {
                var ASSET_URL= '<%= process.env.ASSET_URL %>';

                message.images.forEach((img) => {
                    images+= `
                        <img src="${ASSET_URL + img}" class="w-36" alt="message image">
                    `;
                });
            }
            images+= "</div>";
        
            return `
                <div class="message-item ${side_class}">
                    ${images} 
                    ${message.text}
                </div>
            `;
        }

        function handleRemoveImageBtnsEvents() {
            const remove_img_btns = document.querySelectorAll('.remove-img-btn');
            remove_img_btns.forEach((btn) => {
                btn.addEventListener('click', function() {
                    const index = this.getAttribute('data-imgIndex');                
                    images.splice(index, 1);
                });
            });
        }
    </script>
</body>
</html>