<!DOCTYPE html>
<html lang="en"  class="h-full">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/dist/main.css">
    <link rel="stylesheet" href="/css/fontawesome.min.css" />
    <title>People</title>
</head>

<body class="h-full">
    <%- include('layouts/header.ejs'); %>

    <div class="flex content-container">
        <div class="people-layout w-1/5 flex flex-col bg-black py-2">
            <h4 class="text-white text-xl text-center my-1.5">Friends</h4>
            <hr class="mb-3 bg-gray-600 border-0 h-0.5">

            <% for(let i = 0; i < friends.length; i++) { %>
                <button class="chat-item" data-userId="<%= friends[i]._id %>">
                    <i class="fa-solid fa-user-large"></i> 
                    <%= friends[i].username %>
                </button>
            <% } %>
        </div>
        
        <div class="flex flex-col justify-between w-4/5">
            <%- include('./messages.ejs') %>
        </div>
    </div>

    <script src="/js/master.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script>
        const user = JSON.parse(localStorage.getItem('user'));

        let active_chat_friend = null;

        var socket = io();
        
        socket.emit('connected', user._id);

        socket.on('messageReceived', function(messageObject) {
            messageObject = JSON.parse(messageObject);
            let message = createMessageItem(messageObject.messageInfo);
            
            if(document.querySelector('.no-messages-yet')) {
                document.querySelector('.no-messages-yet').remove();
            }
            document.querySelector('.messages-layout').innerHTML+= message;
        });


        socket.on('typingNow', function(statusObject) {
            statusObject = JSON.parse(statusObject);
            if(statusObject.typing_status) {
                document.querySelector('.typing-status').textContent = "Typing now ...";
            }
            else {
                document.querySelector('.typing-status').textContent = "";
            }
        });

        const chatItems = document.querySelectorAll('.chat-item');
        chatItems.forEach(chatItem => {
            chatItem.addEventListener('click', function() {
                let userId = this.getAttribute('data-userId');
                getMessages(userId);
                document.querySelector('.chat-item .active')?.classList.remove('active');
                this.classList.add('active');
            });
        });

        async function getMessages(userId) {
            fetch(`/api/chats/${userId}`, {headers: {"Content-Type": "application/json"}})
                .then((response) => response.json()).then((res) => {
                    // console.log(res);
                    const chat = res.chat;
                    active_chat_friend = {
                        chat_id: chat._id,
                        user_id: userId
                    };

                    let messagesElm = "";
                    if(chat.hasOwnProperty('messages')) {
                        const messages = chat.messages;
                        messages.forEach((message) => {
                            messagesElm+= createMessageItem(message);
                        });
                    }
                    else {
                        messagesElm = `
                            <div class='no-messages-yet flex flex-col justify-center items-center h-full w-full'>
                                <img src='/images/no-data.svg' class="w-1/5">
                                <h5 class="my-3 text-xl">No Messages Yet ...</h5>
                            </div>`;
                    }

                    const messagesLayout = document.querySelector('.messages-layout');
                    messagesLayout.innerHTML = messagesElm;
                    setTimeout(() => {
                        messagesLayout.scrollTop = messagesLayout.scrollHeight;
                    }, 100);

                    document.querySelector('.message-form-layout').style.display = 'block';
                })
                .catch((err) => {
                    console.log(err);
                });
        }
    
        function createMessageItem(message) {
            const side_class = (message.user_sender == user._id)? 'message_owner' : 'message_receiver';
            var ASSET_URL= '<%= process.env.ASSET_URL %>';
            let item = `<div class="message-item ${side_class}">`;

            if(message.type == 'image') {
                let images = "<div class='flex'>";
                message.images.forEach((img) => {
                    images+= `
                        <img src="${ASSET_URL + img}" class="w-36" alt="message image">
                    `;
                });
                images+= "</div>";
                item+= `${images}`;
            }
            else if(message.type == 'audio') {
                item+= `
                    <audio controls>
                        <source src="${ASSET_URL + message.audio_path}" type="audio/mp3">
                        Your browser does not support the audio tag.
                    </audio>
                `;
            }
            else if(message.type == 'text') {
                item+= `${message.text}`;
            }
                
            item+= '</div>';
            return item;
        }
    
            
        const imageFilesInput = document.getElementById('image_file');

        let images = defineImages();

        function defineImages() {
            return new Proxy([], {
                set(target, property, file) {
                    target[property] = file;

                    let preview_images = "";
                    target.forEach((img, index) => {
                        preview_images+= `
                            <div class="relative">
                                <button class="remove-img-btn bg-red-500  w-5 rounded-md text-sm text-white absolute top-0.5 right-1.5" data-imgIndex="${index}">x</button>
                                <img src="${URL.createObjectURL(img)}" class="w-24 mx-2 rounded">
                            </div>
                        `;
                    });
                    document.querySelector('.images-preview-layout').innerHTML = preview_images;

                    handleRemoveImageBtnsEvents();
                },
            });
        }

        imageFilesInput.addEventListener('change', function(e) {
            for (let i = 0; i < e.target.files.length; i++) {
                images[images.length + i] = e.target.files[i];
            }
        });


        const messageInput = document.getElementById('message');

        messageInput.addEventListener('focus', function() {
            if(active_chat_friend != null) {
                const typingNowObject = {
                    receiver_id: active_chat_friend.user_id,
                    chat_id: active_chat_friend.chat_id,
                    typing_status: true
                };
                socket.emit("typingNow", typingNowObject);
            }
        });

        messageInput.addEventListener('blur', function() {
            if(active_chat_friend != null) {
                const typingNowObject = {
                    receiver_id: active_chat_friend.user_id,
                    chat_id: active_chat_friend.chat_id,
                    typing_status: false
                };
                socket.emit("typingNow", typingNowObject);
            }
        });
        
        document.getElementById('send-message-btn').addEventListener('click', function(e) {
            e.preventDefault();

            let form = document.getElementById('message-form');

            if(active_chat_friend) {
                let formData = new FormData();
                let type = null, hasContent = false;
                let messageText = document.querySelector('#message-form #message');
                const temp_audio_as_base64 = sessionStorage.getItem('temp_audio_as_base64');

                if(temp_audio_as_base64) {
                    type = "audio";
                    formData.append('content_audio', temp_audio_as_base64);
                }
                else if(images.length > 0) {
                    type = "image";
                    images.forEach((img) => {
                        formData.append('images', img);
                    });
                }
                else if(messageText.value) {
                    type = "text";
                    formData.append('content_text', messageText.value);
                }

                if(type != null) {
                    formData.append('type', type);

                    fetch(`/api/chats/${active_chat_friend.chat_id}/messages`, 
                        {
                            method: 'POST',
                            body: formData
                        }
                    )
                    .then((res) => res.json())
                    .then((response) => {
                        // console.log(response);
                        if(response.status) {
                            let message = createMessageItem(response.message);
                            if(document.querySelector('.no-messages-yet')) {
                                document.querySelector('.no-messages-yet').remove();
                            }

                            document.querySelector('.messages-layout').innerHTML+= message;
                            document.querySelector('#message-form #message').value = "";
                            if(type == 'image') {
                                try {
                                    images.splice(0, images.length);
                                } catch (error) {}
                            }
                            else if(type == 'audio'){
                                sessionStorage.removeItem('temp_audio_as_base64');
                                document.getElementById('seconds_timer').innerText = "0.00";
                                document.getElementById('seconds_timer').style.display = "none";
                                document.getElementById('preview-audio-player').innerHTML = "";
                                hideAudioBtns(['delete']);
                                showAudioBtns(['record']);

                                document.querySelector('.image-form').style.display = "inline-block";
                                document.querySelector('#message').style.display = "inline-block";
                            }

                            const sender_id = JSON.parse(localStorage.getItem('user'))._id;
                            let msgObject = {
                                sender_id: sender_id,
                                receiver_id: active_chat_friend.user_id,
                                messageInfo: response.message
                            };

                            socket.emit("messageSended", msgObject);
                        }
                    });
                }
            }
        });

        function handleRemoveImageBtnsEvents() {
            const remove_img_btns = document.querySelectorAll('.remove-img-btn');
            remove_img_btns.forEach((btn) => {
                btn.addEventListener('click', function() {
                    const index = this.getAttribute('data-imgIndex');                
                    images.splice(index, 1);
                });
            });
        }

        const TIMER_MAX = 60;   // seconds
        const TIMER_STEP = 100; // milliseconds
        let state = {
            timer: 0,
            mediaRecorder: null,
            audioRecordingInterval: null,
        };

        const recordAudioBtn = document.getElementById('record-audio-btn');
        recordAudioBtn.addEventListener('click', function() {
            navigator.mediaDevices.getUserMedia({audio: true})
            .then((stream) => {
                state.mediaRecorder = new MediaRecorder(stream);
                state.mediaRecorder.start();

                let chunks = [];
                state.mediaRecorder.ondataavailable = function(e){
                    chunks.push(e.data);
                }

                state.mediaRecorder.onstart = function(e) {     
                    state.audioRecordingInterval = setInterval(timerStep, TIMER_STEP);    
                    document.querySelector('.sound_waves').style.display = "block";
                    document.querySelector('.image-form').style.display = "none";
                    document.querySelector('#message').style.display = "none";
                    hideAudioBtns(['record', 'delete']);
                    showAudioBtns(['pause', 'stop']);
                }

                state.mediaRecorder.onstop = function(e) {
                    clearInterval(state.audioRecordingInterval);
                    const audioBlobFile = new Blob(chunks, {type: 'audio/webm'});
                    const reader = new FileReader();

                    reader.addEventListener('loadend', (e) => {
                        const base64 = e.target.result;
                        sessionStorage.setItem('temp_audio_as_base64', base64)
                    });
                    reader.readAsDataURL(audioBlobFile);

                    // create preview of audio
                    const url = URL.createObjectURL(audioBlobFile);
                    let preview_audio = 
                            `<audio controls>
                                <source src="${url}">
                                Your browser does not support the audio tag !
                            </audio>`;
                    
                    document.getElementById('preview-audio-player').innerHTML = preview_audio;                    
                    hideAudioBtns(['record', 'pause', 'stop', 'resume']);
                    showAudioBtns(['delete']);
                    document.querySelector('.sound_waves').style.display = "none";
                }

                state.mediaRecorder.onpause = function(e) {
                    clearInterval(state.audioRecordingInterval);
                    hideAudioBtns(['record', 'pause']);
                    showAudioBtns(['stop', 'resume']);
                    document.querySelector('.sound_waves').style.display = "none";
                }

                state.mediaRecorder.onresume = function(e) {
                    hideAudioBtns(['record', 'resume']);
                    showAudioBtns(['pause', 'stop']);
                    document.querySelector('.sound_waves').style.display = "block";
                }
            })
        });
    
        const stopAudioBtn = document.getElementById('stop-audio-btn');
        stopAudioBtn.addEventListener('click', function(e) {
            state.mediaRecorder.stop();
        });
        
        const pauseAudioBtn = document.getElementById('pause-audio-btn');
        pauseAudioBtn.addEventListener('click', function(e) {
            state.mediaRecorder.pause();
        });

        const resumeAudioBtn = document.getElementById('resume-audio-btn');
        resumeAudioBtn.addEventListener('click', function(e) {
            state.mediaRecorder.resume();
            state.audioRecordingInterval = setInterval(timerStep, TIMER_STEP);
        });
        
        let deleteAudioBtn = document.getElementById('delete-audio-btn');
        deleteAudioBtn.addEventListener('click', function(e) {
            sessionStorage.removeItem('temp_audio_as_base64');
            document.getElementById('seconds_timer').innerText = "0.00";
            document.getElementById('seconds_timer').style.display = "none";
            document.getElementById('preview-audio-player').innerHTML = "";
            deleteAudioBtn.style.display = "none";
            document.getElementById('record-audio-btn').style.display = "block";

            document.querySelector('.image-form').style.display = "block";
            document.querySelector('#message').style.display = "inline-block";
        });

        function timerStep() {
            state.timer+= TIMER_STEP / 1000;
            if(state.timer >= TIMER_MAX) {
                state.mediaRecorder.stop();
                return;
            }

            let audioRecordingTimer = document.getElementById('seconds_timer');
            audioRecordingTimer.innerText = parseFloat(state.timer).toFixed(2);
        }

        function hideAudioBtns(keys) {
            keys.map((key) => document.getElementById(`${key}-audio-btn`).style.display = "none");
        } 

        function showAudioBtns(keys) {
            keys.map((key) => document.getElementById(`${key}-audio-btn`).style.display = "block");
        }
    </script>
</body>
</html>